This topic provides an overview of how to prepare for using Transport Layer Security (TLS)
with <%= vars.product_full %> to secure communication between apps and service instances.<br>

This topic explains how to provide an existing CA certificate to BOSH CredHub and
generate a new CA certificate with BOSH CredHub.

If you are using <%= vars.ops_manager %> v2.6 or later and you want to use the certificate
provided by <%= vars.ops_manager %>, then you can skip this page.

<p class="note warning"><strong>Warning:</strong> This procedure involves restarting
	all of the VMs in your <%= vars.platform_name %> deployment to apply a CA certificate. The
	operation can take a long time to complete.
</p>

<p class="note"><strong>Note: </strong>
  This certificate is shared by multiple tiles.
  If you have already performed this procedure, you do not need to repeat it.
  To change this certificate, follow the steps in
  <a href="https://docs.pivotal.io/pivotalcf/security/pcf-infrastructure/api-cert-rotation.html">Rotating Certificates</a>.
</p>

##<a id='overview'></a> Overview

<% if vars.service_name == "Redis for Pivotal Platform" %>
Enabling TLS co-locates a second TLS-enabled port on <%= vars.product_short %> service instances.
Apps and clients can use this port to establish encrypted connections with the service.
<% else %>
Enabling TLS provisions a <%= vars.product_short %> server with a certificate.
This certificate enables apps and clients to establish an encrypted connection with the service.
<% end %>
The certificate used in this connection is a server certificate generated by CredHub.

CredHub is a component designed for centralized credential management in <%= vars.platform_name %>
and is co-located on the BOSH Director.
CredHub generates the server certificate with a Certificate Authority (CA) certificate.
The operator can provide this CA certificate to CredHub or have CredHub generate a new CA certificate.

Apps and clients that communicate with the <%= vars.product_short %> server must have access
to the public component of the CA certificate to validate that the server certificate
is trustworthy.

<% if vars.service_name == "Redis for Pivotal Platform" %>

  <%= vars.platform_name %> distributes the public component of the CA certificate by provisioning a copy
  of the CA certificate in the trusted store of each container's operating system.
  Apps written in Java and Spring, or C# and Steeltoe, automatically discover the
  CA certificate in the trusted store.

<% else %>
  <%= vars.platform_name %> distributes the public component of the CA certificate the following
  ways:

  * <%= vars.platform_name %> provisions a copy of the CA certificate in the trusted store of each
  container's operating system.
    Apps written in Java and Spring automatically discover the CA certificate in
  	the trusted store.
  * <%= vars.platform_name %> supplies the public CA certificate in an environment variable called
  `VCAP_SERVICES` that exists in every container.
    Apps not written in Java and Spring can retrieve the public component of the
  	CA certificate from `VCAP_SERVICES`
    and use it to establish an encrypted connection with the data service.
<% end %>

##<a id='workflow'></a> Workflow

The following workflow describes enabling TLS for <%= vars.product_full %>:

1. An operator provides a CA certificate to CredHub by performing the procedures
	in <a href="#credhub-creds">Find the CredHub Credentials in <%= vars.ops_manager %></a> and
	in <a href='#add-ca-cert'> Add the CA Certificate</a> below.
1. An operator enables TLS in the tile configuration while installing <%= vars.product_short %>.
			See [Enable TLS in <%= vars.product_short %>](#enable) below.
<% case vars.service_name
when "Redis for Pivotal Platform" %>
1. An app developer modifies their app to communicate securely with the <%= vars.product_short %> server.
See [Using TLS](./appdevs.html#using-tls).
<% when "MySQL for Pivotal Platform" %>
1. A developer enables TLS for an existing service instance.
    See [Using TLS](./using-tls.html).
1. A developer modifies their app to communicate securely with the <%= vars.product_short %> server:
	+ **For Java and Spring apps,** see [Activate TLS for Java and Spring Apps](./using-tls.html#activate-spring).
	+ **For all other apps,** see [Activate TLS for Non-Spring Apps](./using-tls.html#activate-non-spring).
<% when "RabbitMQ for Pivotal Platform" %>
1. A developer enables TLS for an existing service instance.
		See [Enable TLS for Your Service Instance](./use.html#tls)
1. A developer modifies their app to communicate securely with the <%= vars.product_short %> server:
	+ **For Java or Spring apps,** see [Activate TLS for Java and Spring Apps](./use.html#tls-java-spring).
  + **For all other apps,** see [Modifying Apps for TLS](./modify-apps-tls.html)
<% end %>

<p class="note"><strong>Note</strong>: An operator must also rotate the CA
	certificate if it expires or if it becomes compromised.
	<% if vars.service_name != "Redis for Pivotal Platform" %>
		For information about how to rotate your CA certificate, see
		<a href="./rotating-ca.html">Rotating CA Certificates</a>.
		<% end %>
</p>

##<a id='credhub-creds'></a> Find the CredHub Credentials in <%= vars.ops_manager %>

You need the BOSH CredHub client name and client secret to complete the
[Add the CA Certificate](#add-ca-cert) procedure below.

To find the BOSH CredHub client name and client secret, do the following:

1. In the <%= vars.ops_manager %> Installation Dashboard, click the BOSH Director tile.
1. Click the **Credentials** tab.
1. In the BOSH Director section, click the link to the BOSH Commandline Credentials.
	![CredHub Credentials](credhub-creds.png)
1. Record the values for `BOSH_CLIENT` and `BOSH_CLIENT_SECRET`.


	Here is an example of the credentials page:

	```
	{"credential":"BOSH_CLIENT=ops_manager
	BOSH_CLIENT_SECRET=abCdE1FgHIjkL2m3n-3PqrsT4EUVwXy5
	BOSH_CA_CERT=/var/tempest/workspaces/default/root_ca_certificate
	BOSH_ENVIRONMENT=10.0.0.5 bosh "}
	```
  The `BOSH_CLIENT` is the BOSH CredHub client name and the `BOSH_CLIENT_SECRET` is
	the BOSH CredHub client secret.


##<a id='add-ca-cert'></a> Add the CA Certificate

To generate and add the CA Certificate to <%= vars.ops_manager %>:


1. From the <%= vars.ops_manager %> VM, set the API target of the CredHub CLI as your CredHub server by running:

    ```
    credhub api https://BOSH-DIRECTOR:8844 --ca-cert=/var/tempest/workspaces/default/root_ca_certificate
    ```

    Where `BOSH-DIRECTOR` is the IP address of the BOSH Director VM.
    For example:
    <pre class="terminal">$ credhub api http<span>s:</span>//10.0.0.5:8844 --ca-cert=/var/tempest/workspaces/default/root\_ca\_certificate</pre>

2. Log in to CredHub by running:

    ```
    credhub login --client-name=CREDHUB-CLIENT-NAME --client-secret=CREDHUB-CLIENT-SECRET
    ```
    Where
    * `CREDHUB-CLIENT-NAME` is the value you recorded for `BOSH_CLIENT` in
		[Find the CredHub Credentials in <%= vars.ops_manager %>](#credhub-creds) above.
    * `CREDHUB-CLIENT-SECRET` is the value you recorded for `BOSH_CLIENT_SECRET` in
		[Find the CredHub Credentials in <%= vars.ops_manager %>](#credhub-creds) above. <br>
    For example:
    <pre class="terminal">$ credhub login \
    	--client-name=credhub \
    	--client-secret=abcdefghijklm123456789</pre>

3. If you are using <%= vars.ops_manager %> v2.6 or later, go to step 5.
   Otherwise, find out if a services CA certificate already is present by running the following command:

	```
	credhub get --name="/services/tls_ca"
	```
	If you already have a certificate at the `services/tls_ca` path, go to step 5.

4. Use the CredHub CLI to generate a CA certificate or provide an existing one.
    <p class="note"><strong>Note</strong>: Your <%= vars.platform_name %> deployment can have
			multiple CA certificates.
       Pivotal recommends a dedicated CA certificate for services.</p>
	* **If you do not have a CA certificate,** use the CredHub CLI to generate one by running:
			<pre class="terminal">$ credhub generate \
				--name="/services/tls\_ca" \
				--type="certificate" \
				--is-ca \
	            --common-name="rootCA"</pre>

		<p class=note><strong>Note:</strong> When you run the above command,
			the generated certificate is valid for one year by default.
		You can use the <code>--duration</code> flag to set the validity period to a specific time.
		For example, if you add <code>--duration=1825</code> to the above command,
		the generated certificate is valid for five years.</p>
	* **If you have an existing CA certificate that you want to use,** create
	a new file called `root.pem` with the contents of the certificate.
	  Then run the following command, specifying the path to `root.pem` and
		the private key for the certificate:
	    <pre class="terminal">$ credhub set \
	        --name="/services/tls_ca" \
	        --type="certificate" \
	        --certificate=./root.pem \
	        --private=ERKSOSMFF...</pre>
5. Use the BOSH CLI to extract the `certificate` portion from the CA certificate and print it
   by running:

	 ```
   bosh int <(credhub get \
   --name=/services/tls_ca) \
   --path /value/certificate
   ```
1. Copy the output.

1. Navigate to the <%= vars.ops_manager %> **Installation Dashboard** and select
the BOSH Director tile.

1. Click **Security**.

8. Paste the contents of the CA certificate into **Trusted Certificates**, and then
 click **Save**.

<% if vars.service_name == "Redis for Pivotal Platform" %>
1. Ensure relevant app security groups are open for port 16379. This can be done through the cf CLI.
For more information, see [Managing ASGs with the cf CLI](https://docs.pivotal.io/platform/application-service/concepts/asg.html#procedures).
<% end %>

##<a id='enable'></a> Enable TLS in <%= vars.product_short %>

After preparing your environment for TLS, you must enable TLS in the tile configuration:

To enable TLS in the <%= vars.product_short %> tile:

1. Enable TLS by doing one of the following:
	+ **If you are configuring TLS in an for an existing installation**,
<% if vars.service_name == "Redis for Pivotal Platform" %>
follow the procedure in
	[Upgrade to <%= vars.product_full %>](./upgrade.html#upgrades).
<% else %>
follow the procedure in
	[Configure Security](./install-config.html#security).
<% end %>
	+ **If you are configuring TLS in an for a new installation**,
<% if vars.service_name == "Redis for Pivotal Platform" %>
	follow the procedures in
	[Configure On-Demand Service Settings](./installing.html#on-demand-config),
	including enabling TLS in the **On-Demand Service Settings** tab.
	<% else %>
	follow the procedures in
	[Installing and Configuring <%= vars.product_short %>](./install-config.html),
	including enabling TLS in the [Configure Security](./install-config.html#security) section.
	<% end %>
1. Navigate to **<%= vars.ops_manager %> Installation Dashboard** > **Review Pending Changes**.
1. Ensure that the CA certificate is deployed to all VMS by selecting the following:
	+ <%= vars.app_runtime_full %>
	+ <%= vars.product_short %>
	+ The **Upgrade All On-Demand Service Instances** errand
3. Click **Apply Changes**.
This restarts all the VMs in your <%= vars.platform_name %> deployment and applies your CA certificate.
